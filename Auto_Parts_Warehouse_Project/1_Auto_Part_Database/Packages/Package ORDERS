create or replace PACKAGE PACKAGE_ORDERS
AS
    PROCEDURE FINALIZE_ORDER(EMP_ID INT, O_ID NUMBER);
    FUNCTION GET_ORDER_ID_FROM_TOTE(ORDER_BIN APPROVED_ZONE.BIN%TYPE, ORDER_ZONE APPROVED_ZONE.ZONE%TYPE) RETURN NUMBER;
    FUNCTION GET_NEW_FINAL_ZONE RETURN VARCHAR2;
    PROCEDURE ADD_CUSTOMER_ID(O_ID INT, C_ID INT);
    PROCEDURE REMOVE_SHIPPED_ITEMS_FROM_WAREHOUSE(O_ID INT);
    PROCEDURE CREATE_NEW_ORDER(C_ID INT);
    PROCEDURE MOVE_STAGE_TO_BOX(O_ID NUMBER, P_ID NUMBER, EMP_ID INT, TOTE_BIN APPROVED_ZONE.BIN%TYPE, TOTE_ZONE APPROVED_ZONE.ZONE%TYPE, STAGE_BIN APPROVED_ZONE.BIN%TYPE, STAGE_ZONE APPROVED_ZONE.ZONE%TYPE);
    PROCEDURE MOVE_STAGE_TO_BOX(O_ID NUMBER, P_ID NUMBER, EMP_ID INT, QTY INT, TOTE_BIN APPROVED_ZONE.BIN%TYPE, TOTE_ZONE APPROVED_ZONE.ZONE%TYPE, STAGE_BIN APPROVED_ZONE.BIN%TYPE, STAGE_ZONE APPROVED_ZONE.ZONE%TYPE);
END PACKAGE_ORDERS;

create or replace PACKAGE BODY PACKAGE_ORDERS
AS
    PROCEDURE MOVE_STAGE_TO_BOX(O_ID NUMBER, P_ID NUMBER, EMP_ID INT, QTY INT, TOTE_BIN APPROVED_ZONE.BIN%TYPE, TOTE_ZONE APPROVED_ZONE.ZONE%TYPE, STAGE_BIN APPROVED_ZONE.BIN%TYPE, STAGE_ZONE APPROVED_ZONE.ZONE%TYPE)
    IS
    CURSOR cursor_order_list IS
        SELECT ID
        FROM ORDER_LIST
        WHERE ORDER_ID = O_ID
            AND PRODUCT_ID = P_ID
            AND BIN = TOTE_BIN
            AND ZONE = TOTE_ZONE;

    ROW_ID ORDER_LIST.ID%TYPE;

    BEGIN
    open cursor_order_list;
    for i in 1..QTY
        loop
            fetch cursor_order_list
            INTO ROW_ID;
            EXIT WHEN cursor_order_list%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE(ROW_ID);

            PACKAGE_ORDER_LIST.UPDATE_PRODUCT_LOCATION(ROW_ID, O_ID, P_ID, 1, TOTE_BIN, TOTE_ZONE, STAGE_BIN, STAGE_ZONE);

        end loop;
    END;

    PROCEDURE CREATE_NEW_ORDER(C_ID INT)
    IS
    BEGIN
    INSERT INTO ORDERS(ORDER_ID, CUSTOMER_ID)
    VALUES(ORDER_ID_SEQ.nextval, C_ID); 
    END;

    PROCEDURE MOVE_STAGE_TO_BOX(O_ID NUMBER, P_ID NUMBER, EMP_ID INT, TOTE_BIN APPROVED_ZONE.BIN%TYPE, TOTE_ZONE APPROVED_ZONE.ZONE%TYPE, STAGE_BIN APPROVED_ZONE.BIN%TYPE, STAGE_ZONE APPROVED_ZONE.ZONE%TYPE)
    IS
    ROW_ID ORDER_LIST.ID%TYPE;

    BEGIN
        SELECT ID
        INTO ROW_ID
        FROM ORDER_LIST
        WHERE ORDER_ID = O_ID
            AND PRODUCT_ID = P_ID
            AND BIN LIKE TOTE_BIN
            AND ZONE LIKE TOTE_ZONE
            AND ROWNUM = 1;

        PACKAGE_ORDER_LIST.UPDATE_PRODUCT_LOCATION(ROW_ID, O_ID, P_ID, 1, TOTE_BIN, TOTE_ZONE, STAGE_BIN, STAGE_ZONE);

        EXCEPTION
        WHEN no_data_found THEN
            DBMS_OUTPUT.PUT_LINE('No Pick Item Found');
    END;

    PROCEDURE FINALIZE_ORDER(EMP_ID INT, O_ID NUMBER)
    IS
    CURSOR order_cursor IS
        SELECT ORDER_LIST.PRODUCT_ID, ORDER_LIST.UNITS, ORDER_LIST.ID
        FROM ORDER_LIST
        JOIN ORDERS
            ON ORDER_LIST.ORDER_ID = ORDERS.ORDER_ID
        WHERE ORDER_LIST.ORDER_ID = O_ID
            AND ORDERS.SHIP_DATE IS NULL;

    P_ID ORDER_LIST.PRODUCT_ID%TYPE;
    P_UNITS ORDER_LIST.UNITS%TYPE;
    ROW_ID ORDER_LIST.ID%TYPE;
    NEW_ZONE_NAME APPROVED_ZONE.ZONE%TYPE;
    NEW_BIN_MADE BOOLEAN := FALSE;

    BEGIN
    OPEN order_cursor;      
        LOOP
            FETCH order_cursor
            INTO P_ID, P_UNITS, ROW_ID;
            EXIT WHEN order_cursor%NOTFOUND;

            IF NEW_BIN_MADE = FALSE THEN
                NEW_ZONE_NAME := 'FINAL ' || GET_NEW_FINAL_ZONE;

                INSERT INTO APPROVED_ZONE
                VALUES('FINAL', NEW_ZONE_NAME);

                NEW_BIN_MADE := TRUE;
            END IF;

            UPDATE ORDER_LIST
            SET BIN = 'FINAL',
                ZONE = NEW_ZONE_NAME 
            WHERE ROW_ID = ID;
        END LOOP;
        /* Make sure to see Output if all parts are met, then click yes to finalize */
        /* Empty the tote after order has been finalize */
        UPDATE ORDERS
        SET EMPLOYEE_ID = EMP_ID,
            SHIP_DATE = SYSDATE
        WHERE ORDER_ID = O_ID;

        REMOVE_SHIPPED_ITEMS_FROM_WAREHOUSE(O_ID);

    CLOSE order_cursor;
    END;

    PROCEDURE REMOVE_SHIPPED_ITEMS_FROM_WAREHOUSE(O_ID INT)
    IS
    CURSOR SHIPPED_ITEM_CURSOR IS
        SELECT BIN_LOCATION, ZONE_LOCATION, QUANTITY
        FROM PICKS
        WHERE ORDER_ID = O_ID;

    BIN_LOC ORDER_LIST.BIN%TYPE;
    ZONE_LOC ORDER_LIST.ZONE%TYPE;
    QTY  ORDER_LIST.UNITS%TYPE;
    BEGIN
    OPEN SHIPPED_ITEM_CURSOR;
        LOOP
            FETCH SHIPPED_ITEM_CURSOR
            INTO BIN_LOC, ZONE_LOC, QTY;
            EXIT WHEN SHIPPED_ITEM_CURSOR%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE(BIN_LOC || ' ' || ZONE_LOC);
            DBMS_OUTPUT.PUT_LINE('');
            UPDATE WAREHOUSE_INVENTORY
            SET UNITS = UNITS - QTY
            WHERE BIN = BIN_LOC
                AND ZONE = ZONE_LOC;

            PACKAGE_WAREHOUSE_INVENTORY.UPDATE_ZONE_COUNTS;

        END LOOP;
    CLOSE SHIPPED_ITEM_CURSOR;
    END;

    FUNCTION GET_NEW_FINAL_ZONE 
    RETURN VARCHAR2
    IS
    FINAL_CHAR VARCHAR2(9):= '0x';
    NEW_NUM VARCHAR2(9) := TO_CHAR(FINAL_SEQ.NEXTVAL);
    LOOP_NUM NUMBER := 7 - LENGTH(NEW_NUM);
    BEGIN
    FOR I IN 1..LOOP_NUM
        LOOP
        FINAL_CHAR := FINAL_CHAR || '0';
    END LOOP;
    FINAL_CHAR := FINAL_CHAR || NEW_NUM;    
    RETURN FINAL_CHAR;
    END;

    FUNCTION GET_ORDER_ID_FROM_TOTE(ORDER_BIN APPROVED_ZONE.BIN%TYPE, ORDER_ZONE APPROVED_ZONE.ZONE%TYPE) 
    RETURN NUMBER
    IS
    o_id INT := 0;
    BEGIN
        SELECT ORDER_ID
        INTO o_id
        FROM ORDER_LIST
        WHERE ORDER_BIN = BIN
            AND ORDER_ZONE = ZONE;
        return o_id;
    END;

    PROCEDURE ADD_CUSTOMER_ID(O_ID INT, C_ID INT)
    IS
    BEGIN
    UPDATE ORDERS
    SET CUSTOMER_ID = C_ID
    WHERE ORDER_ID = O_ID;
    END;
END;
