create or replace PACKAGE PACKAGE_PRODUCT
AS
    PROCEDURE UPDATE_PRODUCT_TOTAL;
    PROCEDURE UPDATE_TOTAL_BY_PRODUCT_ID(P_ID INT);
    PROCEDURE ADD_NEW_PRODUCT_FROM_PRODUCT_PART_NAMES;
    PROCEDURE ADD_CATEGORY_ID(p_id INT, c_id INT);
    FUNCTION PRODUCT_NAME_EXISTS(p_name VARCHAR2) RETURN NUMBER;
    PROCEDURE ADD_NEW_PRODUCT(P_NAME VARCHAR2, S_ID INT, C_ID INT, PRICE INT);
    PROCEDURE ADD_NEW_PRODUCT(P_NAME VARCHAR2, S_ID INT, C_ID INT);
END PACKAGE_PRODUCT;

create or replace PACKAGE BODY PACKAGE_PRODUCT
AS
    PROCEDURE UPDATE_PRODUCT_TOTAL
    IS
    CURSOR p_cursor IS
        SELECT PRODUCT_ID
        FROM PRODUCT;

    p_id NUMBER := 0;
    BEGIN
    OPEN p_cursor;
        LOOP
            FETCH p_cursor
            INTO p_id;
            EXIT WHEN p_cursor%notfound;
            UPDATE_TOTAL_BY_PRODUCT_ID(p_id);
        END LOOP;
    END;

    PROCEDURE UPDATE_TOTAL_BY_PRODUCT_ID(P_ID INT)
    IS
    BEGIN
    UPDATE PRODUCT P
    SET P.TOTAL_UNITS = (
        SELECT NVL(SUM(W.UNITS),0)
        FROM WAREHOUSE_INVENTORY W
        WHERE W.PRODUCT_ID = P_ID
    )
    WHERE P.PRODUCT_ID = P_ID;
    END;

    PROCEDURE ADD_CATEGORY_ID(p_id INT, c_id INT)
    IS
    BEGIN
    UPDATE PRODUCT
    SET CATEGORY_ID = c_id
    WHERE PRODUCT_ID = p_id;
    END;

    PROCEDURE ADD_NEW_PRODUCT_FROM_PRODUCT_PART_NAMES
    IS
    CURSOR product_cursor IS 
        SELECT SUPPLIER_ID, PRODUCT_NAME, UNIT_PRICE
        FROM PRODUCT_PART_NAMES;
    p_name PRODUCT.PRODUCT_NAME%TYPE;
    s_id PRODUCT.SUPPLIER_ID%TYPE;
    u_price PRODUCT.UNIT_PRICE%TYPE;
    is_added NUMBER := 0;

    BEGIN
    OPEN product_cursor;
        LOOP
            FETCH product_cursor
            INTO s_id, p_name, u_price;
            EXIT WHEN product_cursor%notfound;

            is_added := PRODUCT_NAME_EXISTS(p_name);
            IF is_added = 0 THEN
                INSERT INTO PRODUCT(PRODUCT_ID, PRODUCT_NAME, UNIT_PRICE, SUPPLIER_ID)
                VALUES(PRODUCT_S.NEXTVAl, p_name, u_price, s_id); 
            END IF;
        END LOOP;
    close product_cursor;
    END;

    FUNCTION PRODUCT_NAME_EXISTS(p_name VARCHAR2)
    RETURN NUMBER
    IS 
    is_added NUMBER := 0;
    BEGIN
        SELECT COUNT(PRODUCT_NAME)
        INTO is_added
        FROM PRODUCT
        WHERE p_name LIKE PRODUCT_NAME;
        RETURN nvl(is_added,0);
    END;

    PROCEDURE ADD_NEW_PRODUCT(P_NAME VARCHAR2, S_ID INT, C_ID INT, PRICE INT)
    IS
    BEGIN
    INSERT INTO PRODUCT(PRODUCT_ID, PRODUCT_NAME, SUPPLIER_ID, CATEGORY_ID, UNIT_PRICE)
    VALUES(PRODUCT_S.NEXTVAl, P_NAME, S_ID, C_ID, PRICE);
    END;

    PROCEDURE ADD_NEW_PRODUCT(P_NAME VARCHAR2, S_ID INT, C_ID INT)
    IS
    BEGIN
    INSERT INTO PRODUCT(PRODUCT_ID, PRODUCT_NAME, SUPPLIER_ID, CATEGORY_ID)
    VALUES(PRODUCT_S.NEXTVAl, P_NAME, S_ID, C_ID);
    END;
END;
